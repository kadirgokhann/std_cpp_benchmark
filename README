# Vector vs List Benchmark

This project benchmarks the performance of iterating over a `std::vector` and a `std::list` in C++. The goal is to measure the time it takes to sum elements in these containers.

## Description

The program contains two functions:

1. **testVector()**: Iterates over a `std::vector<int>` containing `N` elements and sums them.
2. **testList()**: Iterates over a `std::list<int>` containing `N` elements and sums them.

The `std::iota` function is used to initialize the containers with increasing values starting from 0. The execution time of each function is measured using the `<chrono>` library and displayed in microseconds.

## Compilation

To compile the program, use a C++ compiler that supports C++11 or later. For example, you can use `g++`:

g++ -O0 -std=c++11 benchmark.cpp -o benchmark
Here, the -O0 flag disables compiler optimizations to get a more consistent benchmark.

Usage
After compilation, run the program:

bash
Copy code
./benchmark
The output will display the execution times for both the vector and list iterations.

Example Output
less
Copy code
testVector execution time: 120 microseconds
testList execution time: 450 microseconds
Requirements
A C++11-compatible compiler.
CMake or another build system if required for your environment.
Explanation
Vector: A std::vector stores elements in a contiguous memory block, which allows for better cache locality and generally faster iteration times.
List: A std::list stores elements as a doubly linked list, leading to potentially slower iteration due to poor cache locality and the need to traverse memory pointers.
License
This project is free to use and distribute.

sql
Copy code

You should be able to copy this now. Let me know if there are any issues!
